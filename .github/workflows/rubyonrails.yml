# This workflow uses actions that are not certified by GitHub.  They are
# provided by a third-party and are governed by separate terms of service,
# privacy policy, and support documentation.
#
# This workflow will install a prebuilt Ruby version, install dependencies, and
# run tests and linters.
name: "Ruby on Rails CI"
on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master" ]
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1.152.0
        with:
          ruby-version: 3.2.2
          bundler-cache: true
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn

      - name: Install packages
        run: |
          yarn install --pure-lockfile
      # Add or replace any other lints here
      - name: Run linters
        run: |
          bin/rubocop --parallel
#          bin/stylelint
#          bin/prettier
#          bin/eslint

      - name: Run security checks
        run: |
          bin/bundler-audit --update
          bin/brakeman -q -w2

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11-alpine
        ports:
          - "5432:5432"
        env:
          POSTGRES_DB: rails_test
          POSTGRES_USER: rails
          POSTGRES_PASSWORD: password
    env:
      RAILS_ENV: test
      DATABASE_URL: "postgres://rails:password@localhost:5432/rails_test"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # Add or replace dependency steps here
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1.152.0
        with:
          ruby-version: 3.2.2
          bundler-cache: true
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn

      - name: Install packages
        run: |
          yarn install --pure-lockfile
      - name: Build Esbuild
        run: yarn build
      # Add or replace database setup steps here
      - name: Set up database schema
        run: bin/rails db:schema:load
      # Add or replace test runners here
      - name: Run tests
        run: bin/rake

  hadolint:
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  container:
    needs:
      - hadolint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Prepare
        id: prep
        run: |
          BUILD_DATE=$(date --rfc-3339=seconds --utc)
          echo "build_date=${BUILD_DATE}" >> "$GITHUB_OUTPUT"

          VERSION="0.1.0"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:latest

      # Creates a local build to run tests on
      - name: Build and Load local test-container
        uses: docker/build-push-action@v4
        env:
          BUILD_DATE: ${{ steps.prep.outputs.build_date }}
          VERSION: ${{ steps.prep.outputs.version }}
        with:
          build-args: VERSION=$VERSION
          labels: |
            org.opencontainers.image.created=$BUILD_DATE
          context: .
          file: ./Dockerfile
          load: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/dm-workshop:test
          cache-from: "type=gha"
          cache-to: "type=gha,mode=max"

      # Push if not a PR, otherwise just test the build process for all requested platforms
      - name: Build and Push
        uses: docker/build-push-action@v4
        env:
          BUILD_DATE: ${{ steps.prep.outputs.build_date }}
          VERSION: ${{ steps.prep.outputs.version }}
        with:
          build-args: VERSION=$VERSION
          labels: |
            org.opencontainers.image.created=$BUILD_DATE
          context: .
          platforms: ${{ matrix.platform }}
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/dm-workshop:latest
            ghcr.io/${{ github.repository_owner }}/dm-workshop:rolling
            ghcr.io/${{ github.repository_owner }}/dm-workshop:v${{ steps.prep.outputs.version }}
          cache-from: "type=gha"
          cache-to: "type=gha,mode=max"
