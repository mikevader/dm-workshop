# This workflow uses actions that are not certified by GitHub.  They are
# provided by a third-party and are governed by separate terms of service,
# privacy policy, and support documentation.
#
# This workflow will install a prebuilt Ruby version, install dependencies, and
# run tests and linters.
name: "Pull Request: Validate"
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    types:
      - opened
      - edited
      - reopened
      - ready_for_review
      - synchronize

concurrency:
  group: ${{ github.head_ref }}-pr-validate
  cancel-in-progress: true

jobs:
  pr-metadata:
    uses: mikevader/charts/.github/workflows/pr-metadata.yaml@master

  pre-commit-check:
    uses: mikevader/charts/.github/workflows/pre-commit-check.yaml@master
    needs:
      - pr-metadata
    with:
      modifiedFiles: ${{ needs.pr-metadata.outputs.addedOrModifiedFiles }}

  metadata:
    name: Metadata
    runs-on: ubuntu-latest
    needs:
      - pr-metadata
    outputs:
      build_date: ${{ steps.prep.outputs.build_date }}
      changed: ${{ steps.prep.outputs.changed }}
      version: ${{ steps.prep.outputs.version }}
      version_tag: ${{ steps.prep.outputs.version_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Kubernetes tools
        uses: yokawasa/action-setup-kube-tools@v0.11.1
        with:
          setup-tools: |
            yq
          yq: "4.30.7"

      - uses: paulhatch/semantic-version@v5.4.0
        id: current_version
        with:
          # The prefix to use to identify tags
          #tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: '/^(\w+(\(\w+\))?(!)+|.*MAJOR|.*BREAKING CHANGE|.*BREAKING-CHANGE):.*/'
          # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
          major_regexp_flags: ""
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: '/^(feat|perf|refactor|revert|test|MINOR)?(\(\w+\))?:.*/'
          # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
          minor_regexp_flags: ""
          # A string to determine the format of the version output
          version_format: "${major}.${minor}.${patch}-dev.{increment}"
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          change_path: '. ":^.github" ":^CODEOWNERS"'
          # Named version, will be used as suffix for name version tag
          #namespace: my-service
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false
          # If bump_each_commit is also set to true, setting this value will cause the version to increment only if the pattern specified is matched.
          bump_each_commit_patch_pattern: ""
          # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
          search_commit_body: true
          # The output method used to generate list of users, 'csv' or 'json'.
          user_format_type: "csv"
          # Prevents pre-v1.0.0 version from automatically incrementing the major version.
          # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
          enable_prerelease_mode: false
          # If enabled, diagnostic information will be added to the action output.
          debug: true

      # Define if tests and push should be run against which versions/platforms
      # if: github.ref == 'refs/heads/master'
      - name: Prepare
        id: prep
        run: |
          echo "major: ${{ steps.current_version.outputs.major }}"
          echo "minor: ${{ steps.current_version.outputs.minor }}"
          echo "patch: ${{ steps.current_version.outputs.patch }}"
          echo "increment: ${{ steps.current_version.outputs.increment }}"
          echo "version_type: ${{ steps.current_version.outputs.version_type }}"
          echo "version: ${{ steps.current_version.outputs.version }}"
          echo "version_tag: ${{ steps.current_version.outputs.version_tag }}"
          echo "changed: ${{ steps.current_version.outputs.changed }}"
          echo "is_tagged: ${{ steps.current_version.outputs.is_tagged }}"
          echo "authors: ${{ steps.current_version.outputs.authors }}"
          echo "current_commit: ${{ steps.current_version.outputs.current_commit }}"
          echo "previous_commit: ${{ steps.current_version.outputs.previous_commit }}"
          echo "previous_version: ${{ steps.current_version.outputs.previous_version }}"

          BUILD_DATE=$(date --rfc-3339=seconds --utc)
          CHANGED="${{ steps.current_version.outputs.changed }}"

          if [ "${{github.ref}}" == "refs/heads/master" ]; then
            VERSION="${{ steps.current_version.outputs.major }}.${{ steps.current_version.outputs.minor }}.${{ steps.current_version.outputs.patch }}"
          else
            VERSION="${{ steps.current_version.outputs.major }}.${{ steps.current_version.outputs.minor }}.${{ steps.current_version.outputs.patch }}-dev.${{ steps.current_version.outputs.increment }}"
          fi

          VERSION_TAG="${{ steps.current_version.outputs.version_tag }}"

          echo "build_date=${BUILD_DATE}" >> "$GITHUB_OUTPUT"
          echo "changed=${CHANGED}" >> "$GITHUB_OUTPUT"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "version_tag=${VERSION_TAG}" >> "$GITHUB_OUTPUT"

      - name: Debug
        id: debug
        run: |
          echo "build_date: ${{ steps.prep.outputs.build_date }}"
          echo "changed: ${{ steps.prep.outputs.changed }}"
          echo "version: ${{ steps.prep.outputs.version }}"
          echo "version_tag: ${{ steps.prep.outputs.version_tag }}"
          echo "is renovate: ${{ needs.pr-metadata.outputs.isRenovatePR }}"
          echo "should do: ${{ needs.pr-metadata.outputs.isRenovatePR == 'false' }}"

  reviewdog-gha:
    name: ReviewDog GHA
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: reviewdog/action-actionlint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review

  reviewdog-rails:
    name: Reviewdog Rails
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.1
          bundler-cache: true

      #      - name: Review JavaScript
      #        uses: reviewdog/action-eslint@v1
      #        with:
      #          github_token: ${{ secrets.GITHUB_TOKEN }}
      #          reporter: github-pr-review
      #          eslint_flags: "app/javascript/"
      - name: hadolint
        uses: reviewdog/action-hadolint@v1.45.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          filter_mode: diff_context
      #      - name: stylelint
      #        uses: reviewdog/action-stylelint@v1
      #        with:
      #          github_token: ${{ secrets.GITHUB_TOKEN }}
      #          reporter: github-pr-review
      #          stylelint_input: '**/*.css'
      - name: brakeman
        uses: reviewdog/action-brakeman@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          brakeman_version: 6.0.1
          reporter: github-pr-review
      - name: rubocop
        uses: reviewdog/action-rubocop@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          rubocop_version: gemfile
          rubocop_extensions: rubocop-rails:gemfile rubocop-performance:gemfile rubocop-minitest:gemfile
          reporter: github-pr-review

  rails-lint:
    name: Lint Rails Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.1
          bundler-cache: true
      # Add or replace any other lints here
      - name: Run linters
        run: |
          bin/rubocop --parallel
      #          bin/stylelint
      #          bin/prettier
      #          bin/eslint

      - name: Run security checks
        run: |
          bin/bundler-audit --update
          bin/brakeman -q -w2

  rails-test:
    name: Test Rails Application
    runs-on: ubuntu-latest
    needs:
      - rails-lint
    services:
      postgres:
        image: postgres:16-alpine
        ports:
          - "5432:5432"
        env:
          POSTGRES_DB: rails_test
          POSTGRES_USER: rails
          POSTGRES_PASSWORD: password
    env:
      RAILS_ENV: test
      DATABASE_URL: "postgres://rails:password@localhost:5432/rails_test"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # Add or replace dependency steps here
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.1
          bundler-cache: true
      - name: Run tests
        run: bin/rails db:setup test:all
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          format: simplecov
      - name: Test & publish code coverage
        uses: paambaati/codeclimate-action@v8.0.0
        env:
          CC_TEST_REPORTER_ID: ${{secrets.CC_TEST_REPORTER_ID}}
        with:
          coverageLocations: ${{ github.workspace }}/coverage/coverage.json:simplecov

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs:
      - pr-metadata
      - metadata
      - reviewdog-gha
      - reviewdog-rails
      - rails-lint
      - rails-test
    if: needs.metadata.outputs.changed == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare
        id: prep
        run: |
          if [ "${{github.ref}}" == "refs/heads/master" ]; then
            PLATFORM="linux/amd64,linux/arm64"
            ROLLING_LABEL="latest"
          else
            PLATFORM="linux/amd64"
            ROLLING_LABEL="develop"
          fi

          TAGS=$(cat << EOM
          ghcr.io/${{ github.repository_owner }}/dmw:${{ needs.metadata.outputs.version }}
          ghcr.io/${{ github.repository_owner }}/dmw:${ROLLING_LABEL}
          EOM
          )

          echo "platform=${PLATFORM}" >> "$GITHUB_OUTPUT"
          echo "rolling_label=${ROLLING_LABEL}" >> "$GITHUB_OUTPUT"
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo $TAGS >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          if test -f "./goss.yaml"; then
            echo "goss=true" >> "$GITHUB_OUTPUT"
          else
            echo "goss=false" >> "$GITHUB_OUTPUT"
          fi
          echo "push=true" >> "$GITHUB_OUTPUT"
          echo "cache_from=type=gha" >> "$GITHUB_OUTPUT"
          echo "cache_to=type=gha,mode=max" >> "$GITHUB_OUTPUT"
      #          if [ "${{github.event_name}}" == "pull_request" ]; then
      #            echo "push=false" >> "$GITHUB_OUTPUT"
      #            echo "cache_from=type=gha" >> "$GITHUB_OUTPUT"
      #            echo "cache_to=" >> "$GITHUB_OUTPUT"
      #          else
      #            echo "push=true" >> "$GITHUB_OUTPUT"
      #            echo "cache_from=type=gha" >> "$GITHUB_OUTPUT"
      #            echo "cache_to=type=gha,mode=max" >> "$GITHUB_OUTPUT"
      #          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: amd64,arm64

      - name: Login to GHCR
#        if: needs.pr-metadata.outputs.isRenovatePR == 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Install and configure Buildx
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:latest

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository_owner }}/dmw/$GITHUB_REF_NAME
          restore-keys: |
            ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository_owner }}/dmw/$GITHUB_REF_NAME

      # Install the GOSS testing framework
      - name: Set up goss/dgoss
        uses: e1himself/goss-installation-action@v1.2.1
        if: steps.prep.outputs.goss == 'true'
        with:
          version: v0.3.16

      # Creates a local build to run tests on
      - name: Build and Load local test-container
        uses: docker/build-push-action@v6
        if: steps.prep.outputs.goss == 'true'
        with:
          build-args: |
            VERSION=${{ needs.metadata.outputs.version }}
            RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }}
          labels: |
            org.opencontainers.image.created=${{ needs.metadata.outputs.build_date }}
          context: .
          file: ./Dockerfile
          load: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/dmw:test
          cache-from: ${{ steps.prep.outputs.cache_from }}
          cache-to: ${{ steps.prep.outputs.cache_to }}

      # Run GOSS tests if included with the container
      - name: Run GOSS tests
        if: steps.prep.outputs.goss == 'true'
        env:
          GOSS_FILE: ./goss.yaml
        run: |
          dgoss run ghcr.io/${{ github.repository_owner }}/dmw:test

      # Push if not a PR, otherwise just test the build process for all requested platforms
      - name: Build and Push
        uses: docker/build-push-action@v6
#        if: needs.pr-metadata.outputs.isRenovatePR == 'false'
        with:
          build-args: |
            VERSION=${{ needs.metadata.outputs.version }}
            RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }}
          labels: |
            org.opencontainers.image.created=${{ needs.metadata.outputs.build_date }}
          context: .
          platforms: ${{ steps.prep.outputs.platform }}
          file: ./Dockerfile
          push: ${{ steps.prep.outputs.push }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/dmw:${{ needs.metadata.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/dmw:${{ steps.prep.outputs.rolling_label }}
          cache-from: ${{ steps.prep.outputs.cache_from }}
          cache-to: ${{ steps.prep.outputs.cache_to }}

  #  charts-changelog:
  #    uses: mikevader/charts/.github/workflows/charts-changelog.yaml@master
  #    needs:
  #      - pr-metadata
  #      - pre-commit-check
  #    with:
  #      isRenovatePR: ${{ needs.pr-metadata.outputs.isRenovatePR }}
  #      modifiedCharts: ${{ needs.pr-metadata.outputs.addedOrModifiedCharts }}


  charts-prepare:
    name: Build Helm Chart
    runs-on: ubuntu-latest
    needs:
      - pr-metadata
      - metadata
      - docker-build
      - pre-commit-check
    if: needs.metadata.outputs.changed == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Prepare
        env:
          VERSION: ${{ needs.metadata.outputs.version }}
        run: |
          sed -i "s/^version:.*$/version: $VERSION/" charts/dmw/Chart.yaml
          sed -i "s/^appVersion:.*$/appVersion: $VERSION/" charts/dmw/Chart.yaml

      - name: Install Kubernetes tools
        uses: yokawasa/action-setup-kube-tools@v0.11.1
        with:
          setup-tools: |
            helmv3
          helm: "3.14.4"

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: Run chart-testing (lint)
        id: lint
        run: ct lint --config .github/ct-lint.yaml --charts charts/dmw

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      - name: Install Kubernetes tools
        uses: yokawasa/action-setup-kube-tools@v0.11.1
        with:
          setup-tools: |
            helmv3
            yq
          helm: "3.14.4"
          yq: "4.43.1"

      - uses: actions/setup-python@v5
        # if: needs.pr-metadata.outputs.isRenovatePR == 'false'
        with:
          python-version: "3.10"

      - name: Set up chart-testing
        # if: needs.pr-metadata.outputs.isRenovatePR == 'false'
        uses: helm/chart-testing-action@v2.6.1

      - name: Create k3d cluster
        # if: needs.pr-metadata.outputs.isRenovatePR == 'false'
        uses: nolar/setup-k3d-k3s@v1
        with:
          k3d-name: kube
          k3d-args: "--no-lb --no-rollback --k3s-arg --disable=traefik,servicelb,metrics-server@server:*"

      - name: Remove node taints
        # if: needs.pr-metadata.outputs.isRenovatePR == 'false'
        run: |
          kubectl taint --all=true nodes node.cloudprovider.kubernetes.io/uninitialized- || true

      - name: Run chart-testing (install)
        # if: needs.pr-metadata.outputs.isRenovatePR == 'false'
        run: ct install --config .github/ct-install.yaml --charts charts/dmw

      - name: Run chart-releaser
        if: needs.pr-metadata.outputs.isRenovatePR == 'false'
        uses: helm/chart-releaser-action@v1.6.0
        with:
          charts_dir: charts
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_SKIP_EXISTING: "true"

      - name: Tag released version
        if: needs.pr-metadata.outputs.isRenovatePR == 'false' && github.ref == 'refs/heads/master'
        uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ needs.metadata.outputs.version_tag }}

#  chart:
#    needs:
#      - container
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Install Kubernetes tools
#        uses: yokawasa/action-setup-kube-tools@v0.9.3
#        with:
#          setup-tools: |
#            helmv3
#            yq
#          helm: "3.8.0"
#          yq: "4.16.2"
#
#      - name: Install helm-docs
#        run: |
#          wget -O /tmp/helm-docs.deb https://github.com/norwoodj/helm-docs/releases/download/v1.11.0/helm-docs_1.11.0_Linux_x86_64.deb
#          sudo dpkg -i /tmp/helm-docs.deb
#
#      - name: Generate README for changed charts
#        if: |
#          steps.collect-changes.outputs.changesDetected == 'true'
#        run: |
#          CHARTS=(${{ steps.collect-changes.outputs.addedOrModifiedCharts }})
#          for i in "${CHARTS[@]}"
#          do
#              IFS='/' read -r -a chart_parts <<< "$i"
#              if [ -f "charts/${chart_parts[0]}"/"${chart_parts[1]}/Chart.yaml" ]; then
#                ./.github/scripts/gen-helm-docs.sh "${chart_parts[0]}" "${chart_parts[1]}"
#              fi
#          done
#
#      - name: Create commit
#        id: create-commit
#        uses: stefanzweifel/git-auto-commit-action@v4
#        with:
#          file_pattern: charts/**
#          commit_message: "chore: Auto-update chart README [skip ci]"
#          commit_user_name: mikevader[bot]
#          commit_user_email: mikevader[bot]@users.noreply.github.com
#          commit_author: mikevader[bot] <mikevader[bot]@users.noreply.github.com>
#
#      - name: Save commit hash
#        id: save-commit-hash
#        run: |
#          if [ "${{ steps.create-commit.outputs.changes_detected || 'unknown' }}" == "true" ]; then
#            echo '::set-output name=commit_hash::${{ steps.create-commit.outputs.commit_hash }}'
#          else
#            echo "::set-output name=commit_hash::${GITHUB_SHA}"
#          fi
