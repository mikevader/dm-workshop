# This workflow uses actions that are not certified by GitHub.  They are
# provided by a third-party and are governed by separate terms of service,
# privacy policy, and support documentation.
#
# This workflow will install a prebuilt Ruby version, install dependencies, and
# run tests and linters.
name: "Pull Request: Validate"
on:
  pull_request:
    branches:
      - master
    types:
      - opened
      - edited
      - reopened
      - ready_for_review
      - synchronize

concurrency:
  group: ${{ github.head_ref }}-pr-validate
  cancel-in-progress: true

jobs:
  reviewdog-gha:
    name: ReviewDog GHA
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: reviewdog/action-actionlint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review

  reviewdog-rails:
    name: Reviewdog Rails
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1.154.0
        with:
          ruby-version: 3.2.2
          bundler-cache: true
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn
      - name: Install packages
        run: |
          yarn install --pure-lockfile

#      - name: Review JavaScript
#        uses: reviewdog/action-eslint@v1
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          reporter: github-pr-review
#          eslint_flags: "app/javascript/"
      - name: hadolint
        uses: reviewdog/action-hadolint@v1.36.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          filter_mode: diff_context
          fail_on_error: true
#      - name: stylelint
#        uses: reviewdog/action-stylelint@v1
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          reporter: github-pr-review
#          stylelint_input: '**/*.css'
      - name: brakeman
        uses: reviewdog/action-brakeman@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          brakeman_version: 6.0.1
          reporter: github-pr-review
      - name: rubocop
        uses: reviewdog/action-rubocop@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          rubocop_version: gemfile
          rubocop_extensions: rubocop-rails:gemfile
          reporter: github-pr-review

  pr-metadata:
    uses: mikevader/charts/.github/workflows/pr-metadata.yaml@master

  pre-commit-check:
    uses: mikevader/charts/.github/workflows/pre-commit-check.yaml@master
    needs:
      - pr-metadata
    with:
      modifiedFiles: ${{ needs.pr-metadata.outputs.addedOrModifiedFiles }}

#  charts-changelog:
#    uses: mikevader/charts/.github/workflows/charts-changelog.yaml@master
#    needs:
#      - pr-metadata
#      - pre-commit-check
#    with:
#      isRenovatePR: ${{ needs.pr-metadata.outputs.isRenovatePR }}
#      modifiedCharts: ${{ needs.pr-metadata.outputs.addedOrModifiedCharts }}

  charts-lint:
    uses: mikevader/charts/.github/workflows/charts-lint.yaml@master
    needs:
      - pr-metadata
      - pre-commit-check
#      - charts-changelog
    with:
      checkoutCommit: ${{ needs.charts-changelog.outputs.commitHash }}
      chartChangesDetected: ${{ needs.pr-metadata.outputs.addedOrModified }}

  charts-test:
    uses: mikevader/charts/.github/workflows/charts-test.yaml@master
    needs:
      - pr-metadata
      - pre-commit-check
#      - charts-changelog
    with:
      checkoutCommit: ${{ needs.charts-changelog.outputs.commitHash }}
      chartChangesDetected: ${{ needs.pr-metadata.outputs.addedOrModified }}




#
#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#      - name: Install Ruby and gems
#        uses: ruby/setup-ruby@v1.154.0
#        with:
#          ruby-version: 3.2.2
#          bundler-cache: true
#      - name: Setup Node
#        uses: actions/setup-node@v3
#        with:
#          node-version: 18
#          cache: yarn
#
#      - name: Install packages
#        run: |
#          yarn install --pure-lockfile
#      # Add or replace any other lints here
#      - name: Run linters
#        run: |
#          bin/rubocop --parallel
#      #          bin/stylelint
#      #          bin/prettier
#      #          bin/eslint
#
#      - name: Run security checks
#        run: |
#          bin/bundler-audit --update
#          bin/brakeman -q -w2
#
#  test:
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:11-alpine
#        ports:
#          - "5432:5432"
#        env:
#          POSTGRES_DB: rails_test
#          POSTGRES_USER: rails
#          POSTGRES_PASSWORD: password
#    env:
#      RAILS_ENV: test
#      DATABASE_URL: "postgres://rails:password@localhost:5432/rails_test"
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#      # Add or replace dependency steps here
#      - name: Install Ruby and gems
#        uses: ruby/setup-ruby@v1.154.0
#        with:
#          ruby-version: 3.2.2
#          bundler-cache: true
#      - name: Setup Node
#        uses: actions/setup-node@v3
#        with:
#          node-version: 18
#          cache: yarn
#
#      - name: Install packages
#        run: |
#          yarn install --pure-lockfile
#      - name: Build Esbuild
#        run: yarn build
#      # Add or replace database setup steps here
#      - name: Set up database schema
#        run: bin/rails db:schema:load
#      # Add or replace test runners here
#      - name: Run tests
#        run: bin/rake
#      - name: Coveralls Finished
#        uses: coverallsapp/github-action@v2
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          format: simplecov
#      - name: Test & publish code coverage
#        uses: paambaati/codeclimate-action@v5.0.0
#        env:
#          CC_TEST_REPORTER_ID: ${{secrets.CC_TEST_REPORTER_ID}}
#        with:
#          coverageLocations: ${{ github.workspace }}/coverage/coverage.json:simplecov
#
#  hadolint:
#    needs:
#      - lint
#      - test
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#      - name: hadolint
#        uses: hadolint/hadolint-action@v3.1.0
#        with:
#          dockerfile: Dockerfile
#
#  container:
#    needs:
#      - hadolint
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        platform: [amd64]
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#      - name: Prepare
#        id: prep
#        run: |
#          BUILD_DATE=$(date --rfc-3339=seconds --utc)
#          echo "build_date=${BUILD_DATE}" >> "$GITHUB_OUTPUT"
#
#          VERSION="0.1.0"
#          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
#
#      - name: Login to GHCR
#        uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v2
#        with:
#          install: true
#          version: latest
#          driver-opts: image=moby/buildkit:latest
#
#      # Creates a local build to run tests on
#      - name: Build and Load local test-container
#        uses: docker/build-push-action@v4
#        env:
#          BUILD_DATE: ${{ steps.prep.outputs.build_date }}
#          VERSION: ${{ steps.prep.outputs.version }}
#        with:
#          build-args: VERSION=$VERSION
#          labels: |
#            org.opencontainers.image.created=$BUILD_DATE
#          context: .
#          file: ./Dockerfile
#          load: true
#          tags: |
#            ghcr.io/${{ github.repository_owner }}/dm-workshop:test
#          cache-from: "type=gha"
#          cache-to: "type=gha,mode=max"
#
#      # Push if not a PR, otherwise just test the build process for all requested platforms
#      - name: Build and Push
#        uses: docker/build-push-action@v4
#        env:
#          BUILD_DATE: ${{ steps.prep.outputs.build_date }}
#          VERSION: ${{ steps.prep.outputs.version }}
#        with:
#          build-args: VERSION=$VERSION
#          labels: |
#            org.opencontainers.image.created=$BUILD_DATE
#          context: .
#          platforms: ${{ matrix.platform }}
#          file: ./Dockerfile
#          push: true
#          tags: |
#            ghcr.io/${{ github.repository_owner }}/dm-workshop:latest
#            ghcr.io/${{ github.repository_owner }}/dm-workshop:rolling
#            ghcr.io/${{ github.repository_owner }}/dm-workshop:v${{ steps.prep.outputs.version }}
#          cache-from: "type=gha"
#          cache-to: "type=gha,mode=max"
#
#  chart:
#    needs:
#      - container
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Configure Git
#        run: |
#          git config user.name "$GITHUB_ACTOR"
#          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
#
#      - name: Install Kubernetes tools
#        uses: yokawasa/action-setup-kube-tools@v0.9.3
#        with:
#          setup-tools: |
#            helmv3
#            yq
#          helm: "3.8.0"
#          yq: "4.16.2"
#
#      - name: Run chart-releaser
#        uses: helm/chart-releaser-action@v1.5.0
#        with:
#          charts_dir: charts
#          config: .cr.yaml
#        env:
#          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
#          CR_SKIP_EXISTING: "false"
#
#
#
#
#
#
#  chart:
#    needs:
#      - container
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Install Kubernetes tools
#        uses: yokawasa/action-setup-kube-tools@v0.9.3
#        with:
#          setup-tools: |
#            helmv3
#            yq
#          helm: "3.8.0"
#          yq: "4.16.2"
#
#      - name: Install helm-docs
#        run: |
#          wget -O /tmp/helm-docs.deb https://github.com/norwoodj/helm-docs/releases/download/v1.11.0/helm-docs_1.11.0_Linux_x86_64.deb
#          sudo dpkg -i /tmp/helm-docs.deb
#
#      - name: Generate README for changed charts
#        if: |
#          steps.collect-changes.outputs.changesDetected == 'true'
#        run: |
#          CHARTS=(${{ steps.collect-changes.outputs.addedOrModifiedCharts }})
#          for i in "${CHARTS[@]}"
#          do
#              IFS='/' read -r -a chart_parts <<< "$i"
#              if [ -f "charts/${chart_parts[0]}"/"${chart_parts[1]}/Chart.yaml" ]; then
#                ./.github/scripts/gen-helm-docs.sh "${chart_parts[0]}" "${chart_parts[1]}"
#              fi
#          done
#
#      - name: Create commit
#        id: create-commit
#        uses: stefanzweifel/git-auto-commit-action@v4
#        with:
#          file_pattern: charts/**
#          commit_message: "chore: Auto-update chart README [skip ci]"
#          commit_user_name: mikevader[bot]
#          commit_user_email: mikevader[bot]@users.noreply.github.com
#          commit_author: mikevader[bot] <mikevader[bot]@users.noreply.github.com>
#
#      - name: Save commit hash
#        id: save-commit-hash
#        run: |
#          if [ "${{ steps.create-commit.outputs.changes_detected || 'unknown' }}" == "true" ]; then
#            echo '::set-output name=commit_hash::${{ steps.create-commit.outputs.commit_hash }}'
#          else
#            echo "::set-output name=commit_hash::${GITHUB_SHA}"
#          fi
